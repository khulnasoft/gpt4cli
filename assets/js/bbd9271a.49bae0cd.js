"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[745],{4633:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var t=i(4848),s=i(8453);const o={sidebar_position:5,sidebar_label:"Version Control"},r="Version Control",c={id:"core-concepts/version-control",title:"Version Control",description:"Just about every aspect of a Gpt4cli plan is version-controlled, and anything that can happen during a plan creates a new version in the plan's history. This includes:",source:"@site/docs/core-concepts/version-control.md",sourceDirName:"core-concepts",slug:"/core-concepts/version-control",permalink:"/core-concepts/version-control",draft:!1,unlisted:!1,editUrl:"https://github.com/khulnasoft/gpt4cli/tree/main/docs/docs/core-concepts/version-control.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Version Control"},sidebar:"tutorialSidebar",previous:{title:"Pending Changes",permalink:"/core-concepts/reviewing-changes"},next:{title:"Branches",permalink:"/core-concepts/branches"}},l={},a=[{value:"Viewing History",id:"viewing-history",level:2},{value:"Rewinding",id:"rewinding",level:2},{value:"Preventing History Loss With Branches",id:"preventing-history-loss-with-branches",level:2},{value:"Viewing Conversation",id:"viewing-conversation",level:2},{value:"Rewinding After <code>gpt4cli apply</code>",id:"rewinding-after-gpt4cli-apply",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"version-control",children:"Version Control"}),"\n",(0,t.jsx)(n.p,{children:"Just about every aspect of a Gpt4cli plan is version-controlled, and anything that can happen during a plan creates a new version in the plan's history. This includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adding, removing, or updating context."}),"\n",(0,t.jsx)(n.li,{children:"When you send a prompt."}),"\n",(0,t.jsx)(n.li,{children:"When Gpt4cli responds."}),"\n",(0,t.jsx)(n.li,{children:"When Gpt4cli builds the plan's proposed updates to a file into a pending change."}),"\n",(0,t.jsx)(n.li,{children:"When pending changes are rejected."}),"\n",(0,t.jsx)(n.li,{children:"When pending changes are applied to your project."}),"\n",(0,t.jsx)(n.li,{children:"When models or model settings are updated."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"viewing-history",children:"Viewing History"}),"\n",(0,t.jsxs)(n.p,{children:["To see the history of your plan, use the ",(0,t.jsx)(n.code,{children:"gpt4cli log"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gpt4cli log\n"})}),"\n",(0,t.jsx)(n.h2,{id:"rewinding",children:"Rewinding"}),"\n",(0,t.jsxs)(n.p,{children:["To rewind the plan to an earlier state, use the ",(0,t.jsx)(n.code,{children:"gpt4cli rewind"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gpt4cli rewind # Rewind 1 step\ngpt4cli rewind 3  # Rewind 3 steps\ngpt4cli rewind a7c8d66  # Rewind to a specific step\n"})}),"\n",(0,t.jsx)(n.h2,{id:"preventing-history-loss-with-branches",children:"Preventing History Loss With Branches"}),"\n",(0,t.jsxs)(n.p,{children:["Note that currently, there's no way to undo a ",(0,t.jsx)(n.code,{children:"rewind"})," and recover any history that may have been cleared as a result. That said, you can use ",(0,t.jsx)(n.code,{children:"rewind"})," without losing any history with ",(0,t.jsx)(n.a,{href:"/core-concepts/branches",children:"branches"}),". Use ",(0,t.jsx)(n.code,{children:"gpt4cli checkout"})," to a create a new branch before executing ",(0,t.jsx)(n.code,{children:"rewind"}),", and the original branch will still include the history from before the ",(0,t.jsx)(n.code,{children:"rewind"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gpt4cli checkout undo-changes # create a new branch called 'undo-changes'\ngpt4cli rewind ef883a # history is rewound in 'undo-changes' branch\ngpt4cli checkout main # main branch still retains original history \n"})}),"\n",(0,t.jsx)(n.h2,{id:"viewing-conversation",children:"Viewing Conversation"}),"\n",(0,t.jsxs)(n.p,{children:["While the Gpt4cli history includes an entry for each message in the conversation, message content isn't included. To see the full conversation history, use the ",(0,t.jsx)(n.code,{children:"gpt4cli convo"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gpt4cli convo\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"rewinding-after-gpt4cli-apply",children:["Rewinding After ",(0,t.jsx)(n.code,{children:"gpt4cli apply"})]}),"\n",(0,t.jsxs)(n.p,{children:["Like any other action that modifies a plan, running ",(0,t.jsx)(n.code,{children:"gpt4cli apply"})," to apply pending changes to your project file creates a new version in the plan's history."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"gpt4cli apply"})," action can be undone with ",(0,t.jsx)(n.code,{children:"gpt4cli rewind"}),", but it's important to note that this will only make the changes pending again in the Gpt4cli sandbox. It ",(0,t.jsx)(n.strong,{children:"will not"})," undo the changes to your project files. You'll have to do that separately if desired."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);