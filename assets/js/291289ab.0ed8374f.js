"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[381],{8221:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var i=t(4848),r=t(8453);const a={sidebar_position:1,sidebar_label:"Plans"},l="Plans",c={id:"core-concepts/plans",title:"Plans",description:"A plan in Gpt4cli is similar to a conversation in ChatGPT. It might only include a single prompt and model response that executes one small task, or it could represent a long back and forth with the model that generates dozens of files and builds a whole feature or an entire app.",source:"@site/docs/core-concepts/plans.md",sourceDirName:"core-concepts",slug:"/core-concepts/plans",permalink:"/core-concepts/plans",draft:!1,unlisted:!1,editUrl:"https://github.com/khulnasoft/gpt4cli/tree/main/docs/docs/core-concepts/plans.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Plans"},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/quick-start"},next:{title:"Context",permalink:"/core-concepts/context-management"}},s={},o=[{value:"Creating a New Plan",id:"creating-a-new-plan",level:2},{value:"Plan Names and Drafts",id:"plan-names-and-drafts",level:2},{value:"Listing Plans",id:"listing-plans",level:2},{value:"The Current Plan",id:"the-current-plan",level:2},{value:"Deleting Plans",id:"deleting-plans",level:2},{value:"Archiving Plans",id:"archiving-plans",level:2},{value:".gpt4cli Directory",id:"gpt4cli-directory",level:2},{value:"Project Directories",id:"project-directories",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"plans",children:"Plans"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"plan"})," in Gpt4cli is similar to a conversation in ChatGPT. It might only include a single prompt and model response that executes one small task, or it could represent a long back and forth with the model that generates dozens of files and builds a whole feature or an entire app."]}),"\n",(0,i.jsx)(n.p,{children:"A plan includes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Any context that you've loaded."}),"\n",(0,i.jsx)(n.li,{children:"Your conversation with the model."}),"\n",(0,i.jsx)(n.li,{children:"Any proposed changes that have been accumulated during the course of the conversation."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Plans support ",(0,i.jsx)(n.a,{href:"/core-concepts/version-control",children:"version control"})," and ",(0,i.jsx)(n.a,{href:"/core-concepts/branches",children:"branches"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-new-plan",children:"Creating a New Plan"}),"\n",(0,i.jsxs)(n.p,{children:["First ",(0,i.jsx)(n.code,{children:"cd"})," into your ",(0,i.jsx)(n.strong,{children:"project's directory."})," Make a new directory first with ",(0,i.jsx)(n.code,{children:"mkdir your-project-dir"})," if you're starting on a new project."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd your-project-dir\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then ",(0,i.jsx)(n.strong,{children:"start your first plan"})," with ",(0,i.jsx)(n.code,{children:"gpt4cli new"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gpt4cli new\n"})}),"\n",(0,i.jsx)(n.h2,{id:"plan-names-and-drafts",children:"Plan Names and Drafts"}),"\n",(0,i.jsx)(n.p,{children:"When you create a plan, Gpt4cli will automatically name your plan after you send the first prompt, but you can also give it a name up front."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gpt4cli new -n foo-adapters-component\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you don't give your plan a name up front, it will be named ",(0,i.jsx)(n.code,{children:"draft"})," until you send an initial prompt. To keep things tidy, you can only have one active plan named ",(0,i.jsx)(n.code,{children:"draft"}),". If you create a new draft plan, any existing draft plan will be removed."]}),"\n",(0,i.jsx)(n.h2,{id:"listing-plans",children:"Listing Plans"}),"\n",(0,i.jsxs)(n.p,{children:["When you have multiple plans, you can list them with the ",(0,i.jsx)(n.code,{children:"plans"})," command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gpt4cli plans\n"})}),"\n",(0,i.jsx)(n.h2,{id:"the-current-plan",children:"The Current Plan"}),"\n",(0,i.jsxs)(n.p,{children:["It's important to know what the ",(0,i.jsx)(n.strong,{children:"current plan"})," is for any given directory, since most Gpt4cli commands are executed against that plan."]}),"\n",(0,i.jsx)(n.p,{children:"To check the current plan:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gpt4cli current\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can change the current plan with the ",(0,i.jsx)(n.code,{children:"cd"})," command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"gpt4cli cd # select from a list of plans\ngpt4cli cd some-other-plan # cd to a plan by name\ngpt4cli cd 2 # cd to a plan by number in the `gpt4cli plans` list\n"})}),"\n",(0,i.jsx)(n.h2,{id:"deleting-plans",children:"Deleting Plans"}),"\n",(0,i.jsxs)(n.p,{children:["You can delete a plan with the ",(0,i.jsx)(n.code,{children:"delete-plan"})," command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gpt4cli delete-plan # select from a list of plans to delete\ngpt4cli delete-plan some-plan # delete a plan by name\ngpt4cli delete-plan 4 # delete a plan by number in the `gpt4cli plans` list\n"})}),"\n",(0,i.jsx)(n.h2,{id:"archiving-plans",children:"Archiving Plans"}),"\n",(0,i.jsxs)(n.p,{children:["You can archive plans you want to keep around but aren't currently working on with the ",(0,i.jsx)(n.code,{children:"archive"})," command. You can see archived plans in the current directory with ",(0,i.jsx)(n.code,{children:"plans --archived"}),". You can unarchive a plan with the ",(0,i.jsx)(n.code,{children:"unarchive"})," command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"gpt4cli archive # select from a list of plans to archive\ngpt4cli archive some-plan # archive a plan by name\ngpt4cli archive 2 # archive a plan by number in the `gpt4cli plans` list\n\ngpt4cli unarchive # select from a list of archived plans to unarchive\ngpt4cli unarchive some-plan # unarchive a plan by name\ngpt4cli unarchive 2 # unarchive a plan by number in the `gpt4cli plans --archived` list\n"})}),"\n",(0,i.jsx)(n.h2,{id:"gpt4cli-directory",children:".gpt4cli Directory"}),"\n",(0,i.jsxs)(n.p,{children:["When you run ",(0,i.jsx)(n.code,{children:"gpt4cli new"})," for the first time in any directory, Gpt4cli will create a ",(0,i.jsx)(n.code,{children:".gpt4cli"})," directory there for light project-level config."]}),"\n",(0,i.jsx)(n.p,{children:"If multiple people are using Gpt4cli with the same project, you should either:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commit"})," the ",(0,i.jsx)(n.code,{children:".gpt4cli"})," directory and get everyone into the same ",(0,i.jsx)(n.a,{href:"/core-concepts/orgs",children:"org"})," in Gpt4cli."]}),"\n",(0,i.jsxs)(n.li,{children:["Put ",(0,i.jsx)(n.code,{children:".gpt4cli/"})," in ",(0,i.jsx)(n.code,{children:".gitignore"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"project-directories",children:"Project Directories"}),"\n",(0,i.jsxs)(n.p,{children:["So far, we've assumed you're running ",(0,i.jsx)(n.code,{children:"gpt4cli new"})," to create plans in your project's root directory. While that is the most common use case, it can be useful to create plans in subdirectories of your project too. That's because context file paths in Gpt4cli are specified relative to the directory where the plan was created. So if you're working on a plan for just one part of your project, you might want to create the plan in a subdirectory in order to shorten paths when loading context or referencing files in your prompts. This can also help with plan organization if you have a lot of plans."]}),"\n",(0,i.jsxs)(n.p,{children:["When you run ",(0,i.jsx)(n.code,{children:"gpt4cli plans"}),", in addition to showing you plans in the current directory, Gpt4cli will also show you plans in nearby parent directories or subdirectories. This helps you keep track of what plans you're working on and where they are in your project hierarchy. If you want to switch to a plan in a different directory, first ",(0,i.jsx)(n.code,{children:"cd"})," into that directory, then run ",(0,i.jsx)(n.code,{children:"gpt4cli cd"})," to select the plan."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var i=t(6540);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);