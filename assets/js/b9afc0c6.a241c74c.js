"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[487],{4775:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var t=r(4848),s=r(8453);const o={sidebar_position:2,sidebar_label:"Self-Hosting"},i="Self-Hosting",l={id:"hosting/self-hosting",title:"Self-Hosting",description:"Gpt4cli is open source and uses a client-server architecture. The server can be self-hosted. You can run either run it locally or on a cloud server that you control.",source:"@site/docs/hosting/self-hosting.md",sourceDirName:"hosting",slug:"/hosting/self-hosting",permalink:"/hosting/self-hosting",draft:!1,unlisted:!1,editUrl:"https://github.com/khulnasoft/gpt4cli/tree/main/docs/docs/hosting/self-hosting.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Self-Hosting"},sidebar:"tutorialSidebar",previous:{title:"Cloud",permalink:"/hosting/cloud"},next:{title:"CLI Reference",permalink:"/cli-reference"}},c={},a=[{value:"Quickstart",id:"quickstart",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Development vs. Production",id:"development-vs-production",level:2},{value:"docker-compose",id:"docker-compose",level:2},{value:"Other Methods",id:"other-methods",level:2},{value:"PostgreSQL Database",id:"postgresql-database",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Using Docker Build",id:"using-docker-build",level:3},{value:"Run From Source",id:"run-from-source",level:3},{value:"Health Check",id:"health-check",level:2},{value:"Create a New Account",id:"create-a-new-account",level:2},{value:"Note On Local CLI Files",id:"note-on-local-cli-files",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"self-hosting",children:"Self-Hosting"})}),"\n",(0,t.jsx)(n.p,{children:"Gpt4cli is open source and uses a client-server architecture. The server can be self-hosted. You can run either run it locally or on a cloud server that you control."}),"\n",(0,t.jsx)(n.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,t.jsxs)(n.p,{children:["The self-hosting quickstart requires git, docker, and docker-compose. It's designed for local use with a single user. If you instead want to run Gpt4cli on a remote server with multiple users or orgs, continue on to the ",(0,t.jsx)(n.a,{href:"#requirements",children:"Requirements"})," section below."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Run the server in development mode:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/khulnasoft/gpt4cli.git\ncd gpt4cli/app\n./start_local.sh\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Install the Gpt4cli CLI if you haven't already:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl -sL https://raw.githubusercontent.com/khulnasoft/gpt4cli/main/app/cli/install.sh | bash\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Then run:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gpt4cli sign-in\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsxs)(n.li,{children:["Follow the prompts from there to create a new account on your self-hosted server. From there, check out the more general ",(0,t.jsx)(n.a,{href:"/quick-start",children:"CLI quickstart"})," to get fully up and running."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsx)(n.p,{children:"The Gpt4cli server requires a PostgreSQL database (ideally v14), a persistent file system, and git."}),"\n",(0,t.jsx)(n.h2,{id:"development-vs-production",children:"Development vs. Production"}),"\n",(0,t.jsx)(n.p,{children:"The Gpt4cli server can be run in development or production mode. The main differences are how authentication pins and emails are handled, and the default path for the persistent file system."}),"\n",(0,t.jsxs)(n.p,{children:["Development mode is designed for local usage with a single user. Email isn't enabled. Authentication pins are copied to the clipboard instead of sent via email, and a system notification will pop up to let you know that the pin is ready to paste. The pin will also be output to the console. In development mode, the default base directory is ",(0,t.jsx)(n.code,{children:"$HOME/gpt4cli-server"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Production mode is designed for multiple users or organizations. Email is enabled and SMTP environment variables are required. Authentication pins are sent via email. In production mode, the default base directory is ",(0,t.jsx)(n.code,{children:"/gpt4cli-server"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Development or production mode is set with the ",(0,t.jsx)(n.code,{children:"GOENV"})," environment variable. It should be set to either ",(0,t.jsx)(n.code,{children:"development"})," or ",(0,t.jsx)(n.code,{children:"production"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In both development and production mode, the server runs on port 8080 by default. This can be changed with the ",(0,t.jsx)(n.code,{children:"PORT"})," environment variable."]}),"\n",(0,t.jsx)(n.h2,{id:"docker-compose",children:"docker-compose"}),"\n",(0,t.jsxs)(n.p,{children:["For local usage in development mode, you can skip setting up PostgreSQL if you use ",(0,t.jsx)(n.code,{children:"docker-compose"})," with the included ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/khulnasoft/gpt4cli.git\ncd gpt4cli/app\ncp _env .env\n# edit .env to override any default environment variables\ndocker compose build\ndocker compose up\n"})}),"\n",(0,t.jsx)(n.h2,{id:"other-methods",children:"Other Methods"}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-database",children:"PostgreSQL Database"}),"\n",(0,t.jsxs)(n.p,{children:["If you aren't using docker-compose, you'll need a PostgreSQL database. You can run the following SQL to create a user and database, replacing ",(0,t.jsx)(n.code,{children:"user"})," and ",(0,t.jsx)(n.code,{children:"password"})," with your own values:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE USER 'user' WITH PASSWORD 'password';\nCREATE DATABASE 'gpt4cli' OWNER 'user';\nGRANT ALL PRIVILEGES ON DATABASE 'gpt4cli' TO 'user';\n"})}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.code,{children:"GOENV"})," to either ",(0,t.jsx)(n.code,{children:"development"})," or ",(0,t.jsx)(n.code,{children:"production"})," as described above in the ",(0,t.jsx)(n.a,{href:"#development-vs-production",children:"Development vs. Production"})," section:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export GOENV=development\n"})}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export GOENV=production\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You'll also need a ",(0,t.jsx)(n.code,{children:"DATABASE_URL"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export DATABASE_URL=postgres://user:password@host:5432/gpt4cli # replace with your own database URL\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you're running in production mode, you'll need to connect to SMTP to send emails. Set the following environment variables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export SMTP_HOST=smtp.example.com\nexport SMTP_PORT=587\nexport SMTP_USER=user\nexport SMTP_PASSWORD=password\nexport SMTP_FROM=user@example.com # optional, if not set then SMTP_USER is used\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In either development or production mode, the base directory for the persistent file system can optionally be overridden with the ",(0,t.jsx)(n.code,{children:"GPT4CLI_BASE_DIR"})," environment variable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export GPT4CLI_BASE_DIR=~/some-dir/gpt4cli-server\n"})}),"\n",(0,t.jsx)(n.h3,{id:"using-docker-build",children:"Using Docker Build"}),"\n",(0,t.jsxs)(n.p,{children:["The server can be run from a Dockerfile at ",(0,t.jsx)(n.code,{children:"app/Dockerfile.server"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/khulnasoft/gpt4cli.git\nVERSION=$(cat app/server/version.txt) # or use the version you want\ngit checkout server/v$VERSION\ncd gpt4cli/app\nmkdir ~/gpt4cli-server # or another directory where you want to store files\ndocker build -t gpt4cli-server -f Dockerfile.server .\ndocker run -p 8080:8080 \\\n  -v ~/gpt4cli-server:/gpt4cli-server \\\n  -e DATABASE_URL \\\n  -e GOENV \\\n  -e SMTP_HOST \\ \n  -e SMTP_PORT \\\n  -e SMTP_USER \\\n  -e SMTP_PASSWORD \\\n  gpt4cli-server\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The SMTP environment variables above are only required if you're running in ",(0,t.jsx)(n.a,{href:"#development-vs-production",children:"production mode"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"run-from-source",children:"Run From Source"}),"\n",(0,t.jsx)(n.p,{children:"You can also run the server from source:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/khulnasoft/gpt4cli.git\ncd gpt4cli/\nVERSION=$(cat app/server/version.txt) # or use the version you want\ngit checkout server/v$VERSION\ncd app/server\nexport GPT4CLI_BASE_DIR=~/gpt4cli-server # or another directory where you want to store files\ngo run main.go\n"})}),"\n",(0,t.jsx)(n.h2,{id:"health-check",children:"Health Check"}),"\n",(0,t.jsxs)(n.p,{children:["You can check if the server is running by sending a GET request to ",(0,t.jsx)(n.code,{children:"/health"}),". If all is well, it will return a 200 status code."]}),"\n",(0,t.jsx)(n.h2,{id:"create-a-new-account",children:"Create a New Account"}),"\n",(0,t.jsxs)(n.p,{children:["Once the server is running and you've ",(0,t.jsx)(n.a,{href:"/install",children:"installed the Gpt4cli CLI"})," on your local development machine, you can create a new account by running ",(0,t.jsx)(n.code,{children:"gpt4cli sign-in"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"gpt4cli sign-in # follow the prompts to create a new account on your self-hosted server\n"})}),"\n",(0,t.jsx)(n.h2,{id:"note-on-local-cli-files",children:"Note On Local CLI Files"}),"\n",(0,t.jsx)(n.p,{children:"If you use the Gpt4cli CLI and then for some reason you reset the database or use a new one, you'll need to remove the local files that the CLI creates in directories where you used Gpt4cli in order to start fresh. Otherwise, the CLI will attempt to authenticate with an account that doesn't exist in the new database and you'll get errors. This could also happen if you use Gpt4cli Cloud and then switch to self-hosting."}),"\n",(0,t.jsx)(n.p,{children:"To resolve this, remove the following in any directory you used the CLI in:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".gpt4cli-dev"})," directory if you ran the CLI with ",(0,t.jsx)(n.code,{children:"GPT4CLI_ENV=development"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".gpt4cli"})," directory otherwise"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Then run ",(0,t.jsx)(n.code,{children:"gpt4cli sign-in"})," again to create a new account."]}),"\n",(0,t.jsx)(n.p,{children:"If you're still having trouble with accounts, you can also remove the following from your $HOME directory to fully reset them:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".gpt4cli-home-dev"})," directory if you ran the CLI with ",(0,t.jsx)(n.code,{children:"GPT4CLI_ENV=development"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".gpt4cli-home"})," directory otherwise"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);