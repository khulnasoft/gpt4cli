"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[688],{380:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var o=t(4848),r=t(8453);const s={sidebar_position:11,sidebar_label:"Environment Variables"},i="Environment Variables",l={id:"environment-variables",title:"Environment Variables",description:"This is an overview of all the environment variables that can be used with Gpt4cli.",source:"@site/docs/environment-variables.md",sourceDirName:".",slug:"/environment-variables",permalink:"/environment-variables",draft:!1,unlisted:!1,editUrl:"https://github.com/khulnasoft/gpt4cli/tree/main/docs/docs/environment-variables.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,sidebar_label:"Environment Variables"},sidebar:"tutorialSidebar",previous:{title:"Development",permalink:"/development"}},a={},d=[{value:"CLI",id:"cli",level:2},{value:"LLM Providers",id:"llm-providers",level:3},{value:"Upgrades",id:"upgrades",level:3},{value:"Development",id:"development",level:3},{value:"Server",id:"server",level:2},{value:"General",id:"general",level:3},{value:"docker-compose",id:"docker-compose",level:3},{value:"Other methods",id:"other-methods",level:3},{value:"SMTP",id:"smtp",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,o.jsx)(n.p,{children:"This is an overview of all the environment variables that can be used with Gpt4cli."}),"\n",(0,o.jsx)(n.h2,{id:"cli",children:"CLI"}),"\n",(0,o.jsx)(n.h3,{id:"llm-providers",children:"LLM Providers"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"OPENAI_API_BASE= # Your OpenAI server, such as http://localhost:1234/v1 Defaults to empty.\nOPENAI_API_KEY= # Your OpenAI key.\n\n# optional - set API keys for any other providers you're using\nexport OPENROUTER_API_KEY= # Your OpenRouter.ai API key.\nexport TOGETHER_API_KEY = # Your Together.ai API key.\n# etc.\n"})}),"\n",(0,o.jsx)(n.h3,{id:"upgrades",children:"Upgrades"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"GPT4CLI_SKIP_UPGRADE= # Set this to '1' to skip the auto-upgrade check when running the CLI.\n"})}),"\n",(0,o.jsx)(n.h3,{id:"development",children:"Development"}),"\n",(0,o.jsxs)(n.p,{children:["Check out the ",(0,o.jsx)(n.a,{href:"/development",children:"Development Guide"})," for more details."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"GPT4CLI_ENV=development # Set this to 'development' to default to the local development server instead of Gpt4cli Cloud when working on Gpt4cli itself.\nGPT4CLI_API_HOST= # Defaults to http://localhost:8080 if GPT4CLI_ENV is development, otherwise it's https://api.gpt4cli.khulnasoft.com\u2014override this to use a different host.\nGPT4CLI_OUT_DIR=/usr/local/bin # Where the development binary should be output when using dev.sh\nGPT4CLI_DEV_CLI_OUT_DIR=/usr/local/bin # Where the development binary should be output when using dev.sh\nGPT4CLI_DEV_CLI_NAME=gpt4cli-dev # The name of the development binary when using dev.sh\nGPT4CLI_DEV_CLI_ALIAS=pdxd # The alias for the development binary when using dev.sh\nGOPATH= # This should be already set to your Go folder if you've installed Golang.\n"})}),"\n",(0,o.jsx)(n.h2,{id:"server",children:"Server"}),"\n",(0,o.jsxs)(n.p,{children:["Check out the ",(0,o.jsx)(n.a,{href:"/hosting/self-hosting",children:"Self-Hosting Guide"})," for more details."]}),"\n",(0,o.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"GOENV=development # Whether to run in development or production mode. Must be 'development' or 'production'\nGPT4CLI_BASE_DIR= # The base directory to read and write files. Defaults to '$HOME/gpt4cli-server' in development mode, '/gpt4cli-server' in production.\nPORT=8080 # The port the server listens on. Defaults to 8080.\n"})}),"\n",(0,o.jsx)(n.h3,{id:"docker-compose",children:"docker-compose"}),"\n",(0,o.jsxs)(n.p,{children:["For self-hosting with docker-compose, default environment variables are set in ",(0,o.jsx)(n.code,{children:"app/_env"}),". This file should be copied to ",(0,o.jsx)(n.code,{children:"app/.env"})," before running the server. You can override any of these defaults in ",(0,o.jsx)(n.code,{children:".env"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"GPT4CLI_DATA_DIR=/var/lib/gpt4cli/data # When using docker-compose, this is the directory *on your machine* that the Gpt4cli server will use to store data\u2014it will be mounted to the Docker container as a volume.\nPGDATA_DIR=/var/lib/postgresql/data # Where PostgreSQL should store its data.\n\n# Database Credentials\nPOSTGRES_DATABASE=gpt4cli # Your postgres database.\nPOSTGRES_USER=gpt4cli # Your postgres user.\nPOSTGRES_PASSWORD=gpt4cli # Your postgres password.\n"})}),"\n",(0,o.jsx)(n.h3,{id:"other-methods",children:"Other methods"}),"\n",(0,o.jsxs)(n.p,{children:["If you're ",(0,o.jsx)(n.em,{children:"not"})," using docker-compose, you'll need a ",(0,o.jsx)(n.code,{children:"DATABASE_URL"})," environment variable that points to a PostgreSQL database. For example, if you're running PostgreSQL locally, you might set it to something like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"DATABASE_URL=postgres://gpt4cli:<password>@<host>:<port>/gpt4cli?sslmode=disable\n"})}),"\n",(0,o.jsx)(n.h3,{id:"smtp",children:"SMTP"}),"\n",(0,o.jsxs)(n.p,{children:["If you're running in production mode (with ",(0,o.jsx)(n.code,{children:"GOENV=production"}),", typically on a remote server), you'll need SMTP credentials:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"SMTP_HOST= # Your SMTP host.\nSMTP_PORT= # Set this to 1025 e.g. if you are using mailhog.\nSMTP_USER= # SMTP username.\nSMTP_PASSWORD= # SMTP password.\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);